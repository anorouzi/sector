Sector JNI

A Java Native Interface to the Sector distributed file system.

Copyright (C) 2008-2009  Open Data ("Open Data" refers to
one or more of the following companies: Open Data Partners LLC,
Open Data Research LLC, or Open Data Capital LLC.)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License. 

Introduction
============

Since Sector is implemented in C++, writing clients against the Sector client
API requires familiarity with C++ coding. This presents a potential barrier to
non-C++ developers. Sector JNI is a Java Native Interface to the Sector C++
client API, which allows Java developers to write Sector clients using pure
Java. Sector JNI supports the full Sector client API functionality -
e.g. mkdir, remove, list, stat, etc.

Archive Contents
================

The Sector JNI archive contains:

sectorjni/

   build.properties
     Properties file for build.xml

   build.xml
     Ant build script

   lib/
     Library files required for building and running Sector JNI

   src/
     cpp/
       C++ source implementing the native interface to the Sector API

    java/
       Java source files implementing the Java client API 

    test/
       JUnit tests

Dependencies
============

The following packages are required for building/running Sector JNI:

  * Sector - Sector JNI has been tested with Sector versions up to 1.19
  * Ant - Sector JNI uses Apache Ant for building and has been tested with
    version 1.7.1
  * Java - Sector JNI has been tested with JDK1.6

The following packages are used for checking code quality, and are optional:

  * FindBugs - Sector JNI has been tested with FindBugs 1.3.8
  * Checkstyle - Sector JNI has been tested with Checkstyle 5.0

Compiling
=========

After intalling the dependencies above, use the following steps to compile
Sector JNI:

  1. cd sectorjni
  2. Update build.properties:
     * sector.home - This should point to the home directory of your Sector
       installation.
     * jdk.home - Home directory for the JDK.
     * sector.host - Host on which the Sector master server is running.
     * sector.port - Port number for the Sector master server.
     * sector.user - User name for logging into Sector.
     * sector.passwd - Password for logging into Sector.
     * sector.cert.path - Path to the Sector master SSL certificate. Required
       by the client for establishing a secure connection to Sector.

     Optionally, update these values:
     * reports.dir - This is the directory that FindBugs and Checkstyle save
       reports to, as well as the directory in which the Javadoc is generated.
     * findbugs.home - If using FindBugs, this needs to point to the
       installation directory.
     * findbugs.jar - Name of library file for FindBugs.
     * checkstyle.home - If using Checkstyle, this needs to point to the
       installation directory.
     * checkstyle.version - Installed version of Checkstyle.
     * checkstyle.jar - Library file for Checkstyle.
     * checkstyle.rules - Name of config file containing rules for Checkstyle.
   3. Build the project by running the ant command:

        $ ant

      This will create the following directories:

        build, dist

      The build directory contains the class files generated from the Java
      source and the native code shared object. The dist directory contains a
      JAR file containing the Java classes implementing the Sector JNI Java
      API.

Optional Build Tasks
====================

The following optinal tasks assume that you updated the relevant
build.properties values:

To generate a FindBugs report:

  $ ant findbugs

The FindBugs report will be saved to the reports directory.

To generate a Checkstyle report:

  $ ant checkstyle

The Checkstyle report will be saved to the the reports directory.

To generate Javadoc:

  $ ant doc

This will generate Javadocs in the reports/api directory.

Testing
=======

The JUnit tests included with Sector JNI can be used to test the installation
by following these steps:

  1. Ensure that Sector is running.
  2. Ensure that the sector.* properties in build.properties have been
     customized for your installation.
  3. cd sectorjni
  4. Update LD_LIBRARY_PATH to include the location of the Sector libraries and
     the Sector JNI shared object. For example, if Sector is installed to
     /opt/sector, and Sector JNI is in /opt/sectorjni:

       $ export LD_LIBRARY_PATH=/opt/sector/lib:/opt/sectorjni/build/cpp

  5. Run the tests:

       $ ant run-tests

  Note: that "Unable to locate file" should appear three times in the output of
  running the unit tests.  These are the results of asserting that files have
  been removed.

Using Sector JNI
================

There are only a couple of simple requirements for running Java clients
implemented with the Sector JNI API:

  * Setting LD_LIBRARY_PATH to include the location of the Sector libraries and
    the location of the SectorJniClient.so shared object.
  * Setting CLASSPATH to include the classes in the following packages:
      * com.opendatagroup.sector.sectorjni
      * com.opendatagroup.sector.channel
    Note that all of the required classes are jar'ed into the
    sectorjni-v<version>.jar file in the sectorjni/dist/ directory.

The following clients are provided as examples of using Sector JNI:

  * Mkdir.java - Create a new directory in the Sector file system.
  * Remove.java - Remove a file/dir in the Sector file system.
  * CopyFromLocal.java - Copy a file from the local file system to Sector.
  * CopyToLocal.java - Copy a file from Sector to the local file system.
  * List.java - Perform a Sector ls.

The examples can be found in the com.opendatagroup.sector.sectorjni.client
package. For each client there is a corresponding shell script for executing
the client. The shell scripts can be found in the sectorjni/src/java directory.
To run these commands, follow these steps:

  1. First update the parameters in sectorjni/src/java/sectorjni_env.sh:

    * SECTOR_HOME - This should point to the Sector install directory.
    * SECTOR_HOST - Hostname where the Sector master server is running.
    * SECTOR_PORT - Port for the Sector master server.
    * SECTOR_USER - User name for logging into Sector.
    * SECTOR_PASSWD - Password for logging into Sector.
    * SECTOR_CERTPATH - Path to the Sector master SSL certificate.
    * CLASSPATH - Path to the Sector JNI classes.
    * LD_LIBRARY_PATH - This should include the locations of the Sector
                        libraries and the SectorJniClient.so shared object.

  2. Change to the directory containing the scripts:

     $ cd sectorjni/src/java

  3. Run the commands:

     $ ./mkdir.sh <directory name>
     $ ./remove.sh <path>
     $ ./copyFromLocal.sh <source> <destination> - source is a file on the local
       filesystem, destination is the path to copy to in Sector.
     $ ./copyToLocal.sh <source> <destination> - source is a file in the Sector
       file system, destination is a path on the local file system to copy the
       file to.
     $ ./list.sh <path>
